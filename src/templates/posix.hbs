#!/usr/bin/env bash
# Like this script? Generate boilerplate for similar ones at https://bashplate.now.sh.

set -o errexit  # exit on error
set -o nounset  # don't allow unset variables
# set -o xtrace # enable for debugging

usage() {
  printf "{{description}}\n"

  printf "Usage: $(basename "$0") "
  {{#each options}}
    {{#with this}}
  printf -- "{{#unless required}}[{{/unless}}-{{short}}{{#unless flag}}=< {{long}} >{{/unless}}{{#unless required}}]{{/unless}} "
    {{/with}}
  {{/each}}
  printf "\n"

  {{#each options}}
    {{#with this}}
  printf "  -%s\t%s - %s%s\n" "{{short}}" "{{long}}" "{{description}}" "{{#if def}} (default: {{def}}){{/if}}"
    {{/with}}
  {{/each}}
}

version() {
  printf "0.0.1\n"
}

# default values
{{#each flagOptions}}
  {{#with this}}
opt_{{long}}="false"
  {{/with}}
{{/each}}
{{#each parameterOptions}}
  {{#with this}}
opt_{{long}}="{{def}}"
  {{/with}}
{{/each}}

# option parsing
OPTSPEC=:{{#each options}}{{#with this}}{{short}}{{#unless flag}}:{{/unless}}{{/with}}{{/each}}
while getopts $OPTSPEC option; do
  case "$option" in
  {{#each options}}
    {{#with this}}
    {{short}} ) {{#if call}}{{call}}; {{/if}}{{#unless flag}}opt_{{long}}=$OPTARG; {{else}}opt_{{long}}="true"; {{/unless}}{{#if exit}}exit {{exit}} {{/if}} ;;
    {{/with}}
  {{/each}}
   \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
    : ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
    * ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
  esac
done
shift $((OPTIND - 1))

{{#if requiredOptions}}
# required option validation
if {{#each requiredOptions}}{{#with this}}[ -z "$opt_{{long}}" ]{{#unless @last}} || {{/unless}}{{/with}}{{/each}} ; then
  usage
  exit 1
fi
{{/if}}

# convenience variables
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename ${__file} .sh)"
__root="$(cd "$(dirname "${__dir}")" && pwd)" # update this to make it point your project's root


# this would be a good place to start writing your actual script.
echo "$__base was called with..."
{{#each options}}
  {{#with this}}
echo -{{short}}, --{{long}}=$opt_{{long}}
  {{/with}}
{{/each}}

